#!/bin/bash
#
# HANA-CI Configuration Build Script || For VPS / Cloud Server / Local / Continous Integration
#
# Copyright 2019, alanndz <alanmahmud0@gmail.com>
# Copyright 2021, Dicky Herlambang "Nicklas373" <herlambangdicky5@gmail.com>
# Copyright 2016-2022, HANA-CI Build Project
# SPDX-License-Identifier: GPL-3.0-or-later

# Script Revision = 20220503

# Begin configuration
function init() {
echo "Which service that you want to use ?"
echo ""
echo "1. Continous Integration"
echo "2. Cloud Server"
echo ""
echo "NOTE: Write number only!"
read -s srv

if [ "$srv" == "1" ];
	then
		srv_init="1"
		services="Continous Integration"

		# Run CI step
		kci_srv
elif [ "$srv" == "2" ];
	then
		srv_init="2"
		services="Cloud Server"
		bot="Not Used"

		# Run Local step
		kdev
fi
}

function kci_srv() {
echo "Which CI services that you want to use ?"
echo ""
echo "1. Circle-CI"
echo "2. Semaphore-CI"
echo "3. Drone-CI"
echo ""
echo "NOTE: Write number only!"
read -s decision

if [ "$decision" == "1" ];
	then
		bot="Circle-CI"
elif [ "$decision" == "2" ];
	then
		bot="Semaphore-CI"
elif [ "$decision" == "3" ];
	then
		bot="Drone-CI"
fi

# Run next step
kdev
}

function kdev() {
echo ""
echo "Which devices that you want to compile ?"
echo ""
echo "1. Xiaomi Redmi Note 4x"
echo "2. Xiaomi Redmi Note 7"
echo ""
echo "NOTE: Write number only!"
read -s kdev

if [ "$kdev" == "1" ];
	then
		devices="Xiaomi Redmi Note 4x"
elif [ "$kdev" == "2" ];
	then
		devices="Xiaomi Redmi Note 7"
fi

# Run next step
kname
}

function kname() {
if [ "$kdev" == "1" ];
	then
		echo ""
		echo "Which kernel that you want to compile ?"
		echo ""
		echo "1. CAF Kernel"
		echo "2. Kizuna Kernel"
		echo ""
		echo "NOTE: Write number only!"
		read -s kname

		if [ "$kname" == "1" ];
			then
				name="CAF Kernel"
				overclock="0"
				clock="false"
				g_clock="0"
				gpu_clock="false"
		elif [ "$kname" == "2" ];
			then
				name="Kizuna Kernel"
				echo ""
				echo "Overclock Version ?"
				echo "1. Yes"
				echo "2. No"
				echo ""
				echo "NOTE: Write number only!"
				read -s oc

				if [ "$oc" == "1" ];
					then
						overclock="1"
						clock="true"
						g_clock="1"
						gpu_clock="true"
				elif [ "$oc" == "2" ];
					then
						overclock="0"
						clock="false"
						g_clock="0"
						gpu_clock="false"
				fi
		fi
elif [ "$kdev" == "2" ];
	then
		echo ""
		name="Kizuna Kernel"
		kname="3"
		echo "Kizuna Kernel"
		echo ""
		echo "Overclock Version ?"
		echo "1. Yes"
		echo "2. No"
		echo ""
		echo "NOTE: Write number only!"
		read -s oc

		if [ "$oc" == "1" ];
			then
				overclock="1"
				clock="true"
		elif [ "$oc" == "2" ];
			then
				overclock="0"
				clock="false"
		fi

		g_clock="0"
		gpu_clock="false"

fi

# Run next step
krelease
}

function krelease() {
echo ""
echo "Which release type that you want to compile ?"
echo ""
echo "1. Stable"
echo "2. BETA"
echo ""
echo "NOTE: Write number only!"
read -s krelease

if [ "$krelease" == "1" ];
	then
		release="Stable"
elif [ "$krelease" == "2" ];
	then
		release="BETA"
fi

# Run next step
kversion
}

function kversion() {
echo ""
echo "Select your android version"
echo "1. 10"
echo "2. 11"
echo "3. 12"
echo ""
echo "NOTE: Write number only !"
read -s version_avr

if [ "$version_avr" == "1" ];
	then
		avr="0"
		avr_str="Android 10.0"
elif [ "$version_avr" == "2" ];
	then
		avr="1"
		avr_str="Android 11.0"
elif [ "$version_avr" == "3" ];
	then
		avr="2"
		avr_str="Android 12.0"
fi

# Run next step
clang
}

function clang() {
echo ""
echo "Select your compiler :3"
echo ""
echo "1. Proton Clang 13"
echo "2. AOSP Clang 12.0.0 + GCC 4.9 (Non-elf)"
echo "3. SDCLANG 12.1.1 + GCC 4.9 (Non-elf)"
echo "4. SDCLANG 14.1.0 + GCC 4.9 (Non-elf)"
echo "5. Dora Clang 15.0.0"
echo ""
echo "NOTE: Write number only !"
read -s clang

if [ "$clang" == "1" ];
	then
		comp="1"
		ext_clang="Proton Clang 13"
elif [ "$clang" == "2" ];
	then
		comp="2"
		ext_clang="AOSP Clang 12.0.0 + GCC 4.9 (Non-elf)"
elif [ "$clang" == "3" ];
	then
		comp="3"
		ext_clang="SDCLANG 12.1.1 + GCC 4.9 (Non-elf)"
elif [ "$clang" == "4" ];
	then
		comp="4"
		ext_clang="SDCLANG 14.1.0 + GCC 4.9 (Non-elf)"
elif [ "$clang" == "5" ];
	then
		comp="5"
		ext_clang="Dora Clang 15.0.0"
fi

if [ "$srv_init" == "1" ];
	then
		# Run next step
		build="clean"
		main
elif [ "$srv_init" == "2" ];
	then
		# Run next step
		clean
fi
}

function clean() {
# Start a clean build
echo ""
echo "Make a clean build ?"
echo "1. Yes"
echo "2. No"
echo ""
echo "NOTE: Write number only !"
read -s stats

if [ "$stats" == "1" ];
	then
		clean="1"
		build="Clean"
elif [ "$stats" == "2" ];
	then
		clean="2"
		build="Dirty"
fi

# Run next step
main
}

function main() {
# Show user option
echo ""
echo "================================================================="
echo "| Your selection						|"
echo "|								|"
echo "| Machine Services	: $services			|"
echo "| CI Services		: $bot				|"
echo "| Devices		: $devices			|"
echo "| Kernel		: $name				|"
echo "| Release		: $release					|"
echo "| Build			: $build					|"
echo "| Android Ver		: $avr_str				|"
echo "| Ext Clang		: $ext_clang	|"
echo "| CPU Overclock		: $clock					|"
echo "| GPU Overclock		: $gpu_clock					|"
echo "|								|"
echo "| is this right option ?					|"
echo "|								|"
echo "| 1. Yes							|"
echo "| 2. No								|"
echo "|								|"
echo "| NOTE: Write number only!					|"
echo "================================================================="
read -s user

# Configuring CI
if [ "$user" == "2" ];
	then
		echo "See ya"
		exit 1
elif [ "$user" == "1" ];
	then
		echo "Configuring Build Script"
		if [ "$kname" == "1" ];
			then
				sed -i -e 's/KERNEL_NAME=1/KERNEL_NAME=0/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_NAME=2/KERNEL_NAME=0/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_SCHED=0/KERNEL_SCHED=1/g'  ${HOME}/tools/scripts/build
		elif [ "$kname" == "2" ];
			then
				sed -i -e 's/KERNEL_NAME=0/KERNEL_NAME=1/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_NAME=2/KERNEL_NAME=1/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_SCHED=0/KERNEL_SCHED=1/g'  ${HOME}/tools/scripts/build
		elif [ "$kname" == "3" ];
			then
				sed -i -e 's/KERNEL_NAME=0/KERNEL_NAME=2/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_NAME=1/KERNEL_NAME=2/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_SCHED=0/KERNEL_SCHED=1/g'  ${HOME}/tools/scripts/build
		fi
		if [ "$avr" == "0" ];
			then
				sed -i -e 's/KERNEL_AVR=1/KERNEL_AVR=0/g' ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_AVR=2/KERNEL_AVR=0/g' ${HOME}/tools/scripts/build
		elif [ "$avr" == "1" ];
			then
				sed -i -e 's/KERNEL_AVR=0/KERNEL_AVR=1/g' ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_AVR=2/KERNEL_AVR=1/g' ${HOME}/tools/scripts/build
		elif [ "$avr" == "2" ];
			then
				sed -i -e 's/KERNEL_AVR=0/KERNEL_AVR=2/g' ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_AVR=1/KERNEL_AVR=2/g' ${HOME}/tools/scripts/build
		fi
		if [ "$kdev" == "1" ];
			then
				sed -i -e 's/KERNEL_CODENAME=1/KERNEL_CODENAME=0/g'  ${HOME}/tools/scripts/build
		elif [ "$kdev" == "2" ];
			then
				sed -i -e 's/KERNEL_CODENAME=0/KERNEL_CODENAME=1/g'  ${HOME}/tools/scripts/build
		fi
		if [ "$krelease" == "1" ];
			then
				sed -i -e 's/KERNEL_STATE=0/KERNEL_STATE=1/g'  ${HOME}/tools/scripts/build
		elif [ "$krelease" == "2" ];
			then
				sed -i -e 's/KERNEL_STATE=1/KERNEL_STATE=0/g'  ${HOME}/tools/scripts/build
		fi
		if [ "$comp" == "1" ];
			then
				sed -i -e 's/KERNEL_GCC=1/KERNEL_GCC=0/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_CLANG=1/KERNEL_CLANG=0/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_CLANG=2/KERNEL_CLANG=0/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_CLANG=3/KERNEL_CLANG=0/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_CLANG=4/KERNEL_CLANG=0/g'  ${HOME}/tools/scripts/build
		elif [ "$comp" == "2" ];
			then
				sed -i -e 's/KERNEL_GCC=0/KERNEL_GCC=1/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_CLANG=0/KERNEL_CLANG=1/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_CLANG=2/KERNEL_CLANG=1/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_CLANG=3/KERNEL_CLANG=1/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_CLANG=4/KERNEL_CLANG=1/g'  ${HOME}/tools/scripts/build
		elif [ "$comp" == "3" ];
			then
				sed -i -e 's/KERNEL_GCC=0/KERNEL_GCC=1/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_CLANG=0/KERNEL_CLANG=2/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_CLANG=1/KERNEL_CLANG=2/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_CLANG=3/KERNEL_CLANG=2/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_CLANG=4/KERNEL_CLANG=2/g'  ${HOME}/tools/scripts/build
		elif [ "$comp" == "4" ];
			then
				sed -i -e 's/KERNEL_GCC=0/KERNEL_GCC=1/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_CLANG=0/KERNEL_CLANG=3/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_CLANG=1/KERNEL_CLANG=3/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_CLANG=2/KERNEL_CLANG=3/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_CLANG=4/KERNEL_CLANG=3/g'  ${HOME}/tools/scripts/build
		elif [ "$comp" == "5" ];
			then
				sed -i -e 's/KERNEL_GCC=0/KERNEL_GCC=1/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_CLANG=0/KERNEL_CLANG=4/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_CLANG=1/KERNEL_CLANG=4/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_CLANG=2/KERNEL_CLANG=4/g'  ${HOME}/tools/scripts/build
				sed -i -e 's/KERNEL_CLANG=3/KERNEL_CLANG=4/g'  ${HOME}/tools/scripts/build
		fi
		if [ "$kdev" == "1" ];
			then
				if [ "$overclock" == "0" ];
					then
						sed -i -e 's/KERNEL_OVERCLOCK=1/KERNEL_OVERCLOCK=0/g'   ${HOME}/tools/scripts/build
				elif [ "$overclock" == "1" ];
					then
						sed -i -e 's/KERNEL_OVERCLOCK=0/KERNEL_OVERCLOCK=1/g'   ${HOME}/tools/scripts/build
				fi
		elif [ "$kdev" == "2" ];
			then
				if [ "$overclock" == "0" ];
					then
						sed -i -e 's/KERNEL_OVERCLOCK=1/KERNEL_OVERCLOCK=0/g'   ${HOME}/tools/scripts/build
				elif [ "$overclock" == "1" ];
					then
						sed -i -e 's/KERNEL_OVERCLOCK=0/KERNEL_OVERCLOCK=1/g'	${HOME}/tools/scripts/build
				fi
		fi
		if [ "$srv_init" == "1" ];
			then
				echo "Configuring CI Script"
				if [ "$decision" == "1" ];
					then
						sed -i -e 's/KERNEL_CI_SERVICE=0/KERNEL_CI_SERVICE=1/g'  ${HOME}/tools/scripts/build
						sed -i -e 's/KERNEL_CI_SERVICE=2/KERNEL_CI_SERVICE=1/g'  ${HOME}/tools/scripts/build
				elif [ "$decision" == "2" ];
					then
						sed -i -e 's/KERNEL_CI_SERVICE=0/KERNEL_CI_SERVICE=2/g'  ${HOME}/tools/scripts/build
						sed -i -e 's/KERNEL_CI_SERVICE=1/KERNEL_CI_SERVICE=2/g'  ${HOME}/tools/scripts/build
				elif [ "$decision" == "3" ];
					then
						sed -i -e 's/KERNEL_CI_SERVICE=2/KERNEL_CI_SERVICE=0/g'  ${HOME}/tools/scripts/build
						sed -i -e 's/KERNEL_CI_SERVICE=1/KERNEL_CI_SERVICE=0/g'  ${HOME}/tools/scripts/build
				fi

				# Configuring machine environment
				sed -i -e 's/KERNEL_MACHINE_ENV=1/KERNEL_MACHINE_ENV=0/g'  ${HOME}/tools/scripts/build

				echo "Triggering CI"

				# Trigger script earlier
				trigger_script

				if [ "$decision" == "1" ];
					then
						echo "Push to Circle-CI"
						cd ~/build_kernel
				elif [ "$decision" == "2" ];
					then
						echo "Push to Semaphore-CI"
						cd ~/Semaphore-CI
				elif [ "$decision" == "3" ];
					then
						echo "Push to Drone-CI"
						cd ~/Drone-CI
				fi

				# Trigger CI
				trigger_ci
		elif [ "$srv_init" == "2" ];
			then
				if [ "$clean" == "1" ];
					then
						sed -i -e 's/KERNEL_CLEAN_BUILD=0/KERNEL_CLEAN_BUILD=1/g' ${HOME}/tools/scripts/build
				elif [ "$clean" == "2" ];
					then
						sed -i -e 's/KERNEL_CLEAN_BUILD=1/KERNEL_CLEAN_BUILD=0/g' ${HOME}/tools/scripts/build
				fi

				# Configuring ma
				# Build decision
				echo " "
				echo "Want to compile now ? "
				echo ""
				echo "1. Yes"
				echo "2. No"
				read -s build

				# Running build script
				if [ "$build" == "1" ];
					then
						bash build
				elif [ "$build" == "2" ];
					then
						echo "See ya"
						exit 1
				fi
		fi
fi
}

function trigger_script() {
git add .
git commit -m "ci: trigger: Automated Trigger CI" -s
git push origin script
}

function trigger_ci() {
git commit --allow-empty -am "ci: trigger: Automated Trigger CI" -s
git push -f
}

# run main
init
